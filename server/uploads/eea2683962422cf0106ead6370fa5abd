Authors,Author full names,Author(s) ID,Title,Year,Source title,Volume,Issue,Art. No.,Page start,Page end,Page count,Cited by,DOI,Link,Affiliations,Authors with affiliations,Abstract,Author Keywords,Index Keywords,Correspondence Address,Editors,Publisher,ISSN,ISBN,CODEN,PubMed ID,Language of Original Document,Abbreviated Source Title,Document Type,Publication Stage,Open Access,Source,EID
Ghosh M.; Roy A.; Sil P.; Mondal K.C.,"Ghosh, Moumita (57209634697); Roy, Anirban (58280609200); Sil, Pritam (57223035780); Mondal, Kartick Chandra (8577209400)",57209634697; 58280609200; 57223035780; 8577209400,Frequent itemset mining using FP-tree: a CLA-based approach and its extended application in biodiversity data,2023,Innovations in Systems and Software Engineering,19,3,,283,301,18,2,10.1007/s11334-022-00500-3,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85142286668&doi=10.1007%2fs11334-022-00500-3&partnerID=40&md5=e231053ac933e93a0f8e3f8a6da28fa2,"Department of Information Technology, Jadavpur University, Kolkata, India; West Bengal Biodiversity Board, Kolkata, India","Ghosh M., Department of Information Technology, Jadavpur University, Kolkata, India; Roy A., West Bengal Biodiversity Board, Kolkata, India; Sil P., Department of Information Technology, Jadavpur University, Kolkata, India; Mondal K.C., Department of Information Technology, Jadavpur University, Kolkata, India","The efficient discovery of frequent itemsets from a transaction database is the fundamental step for association rule mining in data analytics. Interesting associations among the items present in a transaction database contribute to knowledge enrichment. Thus, decision-making and pattern generation from the massive amounts of data become effortless. But one of the major problems associated with the algorithms of frequent itemset mining is excessive memory requirements, which cause them to be inappropriate for larger datasets with itemsets having high cardinality. A few novel data structures for mining frequent itemsets have been introduced in recent years. For example, N-List, NodeSet, DiffNodeSet, proximity list, etc. have been proposed that show a coherent mining approach for improving the execution time while still leaving the scope for further improvements in memory requirements. In this paper, we propose a novel algorithm using cellular learning automata (CLA) and multiple FP tree structures for frequent itemset mining that is efficient in both time and memory requirements. Extensive experimentation has been performed by comparing the performance of the proposed method with the leading algorithms and using publicly available real and synthetic datasets designed specifically for pattern mining algorithms. It can be concluded that the proposed method is memory-efficient and shows comparable execution time with varying dataset dimensions and dataset density, assuring its robustness. In addition to the proposal of the new methodology for frequent itemset mining, its potential domain-specific usage in species biodiversity data analysis has also been discussed. The fact that which groups of species are closely related can be derived from huge occurrence records of species datasets. This could help in understanding species co-occurrence in multiple sites, which in turn assists in solving ecology-related issues for afforesting and reforesting. It could be a step forward toward the advantageous use of computer science in the biodiversity domain. © 2022, The Author(s), under exclusive licence to Springer-Verlag London Ltd., part of Springer Nature.",Application; Biodiversity; Cellular learning automata; FP-growth; Frequent itemset; Species data,Data Analytics; Data mining; Data structures; Database systems; Decision making; Trees (mathematics); Biodiversity datum; Cellular learning automata; Data analytics; FP growths; FP tree; Frequent itemset; Frequent itemset mining; Memory requirements; Species data; Transaction database; Biodiversity,"K.C. Mondal; Department of Information Technology, Jadavpur University, Kolkata, India; email: kartickjgec@gmail.com",,Springer Science and Business Media Deutschland GmbH,16145046,,,,English,Innov. Syst. Softw. Eng.,Article,Final,,Scopus,2-s2.0-85142286668
"Mondal K.C.; Paul A.; Sarkar A.","Mondal, Kartick Chandra (8577209400); Paul, Ankur (57206860844); Sarkar, Anindita (57225730469)","8577209400; 57206860844; 57225730469","Brief review on optimal suffix data structures","2017","Advances in Intelligent Systems and Computing","458","","","205","214","9","0","10.1007/978-981-10-2035-3_22","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85006056601&doi=10.1007%2f978-981-10-2035-3_22&partnerID=40&md5=ec7131e86c6ecbff4e42dab2848b3e0a","Department of Information Technology, Jadavpur University, Kolkata, India; School of Mobile Computing, Jadavpur University, Kolkata, India","Mondal K.C., Department of Information Technology, Jadavpur University, Kolkata, India; Paul A., Department of Information Technology, Jadavpur University, Kolkata, India; Sarkar A., School of Mobile Computing, Jadavpur University, Kolkata, India","Suffix tree is a fundamental data structure in the area of combinatorial pattern matching. It has many elegant applications in almost all areas of data mining. This is an efficient data structure for finding solutions in these areas but occupying good amount of space is the major disadvantage of it. Optimizing this data structure has been an active area of research ever since this data structure has been introduced. Presenting major works on optimization of suffix tree is the matter of this article. Optimization in terms of space required to store the suffix tree or time complexity associated with the construction of the tree or performing operation like searching on the tree are major attraction for researcher over the years. In this article, we have presented different forms of this data structure and comparison between them have been studied. A comparative study on different algorithms of these data structures which turns out to be optimized versions of suffix tree in terms of space and time or both required to construct the tree or the time required to perform a search operation on the tree have been presented. © Springer Science+Business Media Singapore 2017.","Pat tree; Suffix array; Suffix cactus; Suffix tree","Data mining; Data structures; Forestry; Intelligent computing; Pattern matching; Structural optimization; Combinatorial pattern matching; Comparative studies; Efficient data structures; Finding solutions; Pat tree; Suffix arrays; Suffix cactus; Suffix-trees; Trees (mathematics)","K.C. Mondal; Department of Information Technology, Jadavpur University, Kolkata, India; email: kartickjgec@gmail.com","Mandal J.K.; Satapathy S.C.; Bhateja V.; Sanyal M.K.","Springer Verlag","21945357","978-981102034-6","","","English","Adv. Intell. Sys. Comput.","Conference paper","Final","","Scopus","2-s2.0-85006056601"